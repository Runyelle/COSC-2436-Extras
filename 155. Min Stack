class MinStack {
private:
    stack<int> stk;
    stack<int> minStk;

public:
    MinStack() {}
    
    void push(int val) {
        stk.push(val);
        if(minStk.empty() || minStk.top() >= stk.top()){
            minStk.push(val);
        }
    }
    
    void pop() {
        if(minStk.top() == stk.top()){
            minStk.pop();
        }
        stk.pop();
    }
    
    int top() {
        return stk.top();
    }
    
    int getMin() {
        /*MinStack tempStk = stk;
        MinStack* minStk = new MinStack();

        while(!stk.empty()){
            if(minStk.empty()){
                minStk.push(tempStk.top());
            }
            else if(minStk.top() > tempStk.top()){
                minStk.push(stk.top());
            }
            tempStk.pop();
        }*/
        return minStk.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
